# -*- coding: utf-8 -*-
"""testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dwroc3wJtO1Bx1Em6RNfhG4FLepJZNqv
"""

from google.colab import files
files.upload()

import pandas as pd
import datetime
df = pd.read_csv("Weather_Data.csv", parse_dates = ['Timestamp'], index_col = ['Timestamp'])
df.head()

import pandas as pd

df1 = pd.read_csv('Weather_Data.csv')  # Read the existing CSV file into a DataFrame
df1 = df1[:-9]

# Read the new CSV file into a DataFrame
df2 = pd.read_csv('Combined_DHASC_power.csv')

# Concatenate the new data with the existing DataFrame horizontally (by columns)
df = pd.concat([df1, df2], axis=1)

df.isnull().sum()

import datetime
df.to_csv('combined_file.csv', index=False)
df = pd.read_csv("combined_file.csv", parse_dates = ['Timestamp'], index_col = ['Timestamp'])
df.shape

df = df.drop('Active_Energy_Delivered_Received', axis=1)
df = df.drop('Current_Phase_Average', axis=1)
df = df.drop('Power_Factor_Signed', axis=1)
df = df.drop('Average_Voltage_Line_to_Neutral', axis=1)
df = df.drop('THD_Voltage_Average', axis=1)
df = df.drop('Frequency', axis=1)

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")

plt.figure(figsize=(18,18))
cor1 = df.corr()
sns.heatmap(cor1, annot=True, cmap="viridis",annot_kws={"size":8})
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(14,14))

# Get the numerical columns
numerical_columns = df.select_dtypes(include=['number']).columns

# Calculate the correlation matrix
correlation_matrix = df[numerical_columns].corr()

# Create the heatmap
sns.heatmap(correlation_matrix, annot=True, annot_kws={"size":14})
plt.show()

df = df.copy()
df['date'] = df.index
df['Date'] = df['date'].dt.date
df['hour'] = df['date'].dt.hour
df['month'] = df['date'].dt.month
df['year'] = df['date'].dt.year
df.head()

df.reset_index(inplace=True)
#df.to_csv("Weather_Data_new.csv", index=False)
df = df.drop('Timestamp', axis=1)
df = df.drop('Wind_Speed', axis=1)
df.head()

df.isnull().sum()

test_data = df[df["Radiation_Global_Tilted"].isnull()]
test_data.shape


x_test = test_data[["Global_Horizontal_Radiation"]]
x_test.shape

test_data.head()

train_data = df.dropna(subset="Radiation_Global_Tilted")
train_data.shape

x_train = train_data[["Global_Horizontal_Radiation"]]
x_train = x_train.fillna(method='ffill')
x_train.shape

y_train = train_data["Radiation_Global_Tilted"]
y_train.shape

from sklearn.linear_model import LinearRegression
LR_model = LinearRegression()

LR_model.fit(x_train, y_train)

train_score = LR_model.score(x_train, y_train)

print(f"Model Score (R^2) on Training Data: {train_score}")

import math
from sklearn.metrics import mean_absolute_error,mean_squared_error
y_train_pred = LR_model.predict(x_train)

mse = mean_squared_error(y_train, y_train_pred)
rmse = math.sqrt(mse)
print(f'Root Mean Squared Error: {rmse}')

mae_train = mean_absolute_error(y_train, y_train_pred)

print(f"Mean Absolute Error (MAE) on Training Data: {mae_train}")

from sklearn.ensemble import RandomForestRegressor
random_forest_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
random_forest_model.fit(x_train, y_train)

train_score_rf = random_forest_model.score(x_train, y_train)

print(f"Model Score (R^2) on Training Data: {train_score_rf}")

from sklearn.metrics import mean_absolute_error
y_train_pred = random_forest_model.predict(x_train)
mae_train = mean_absolute_error(y_train, y_train_pred)

mse = mean_squared_error(y_train, y_train_pred)
rmse = math.sqrt(mse)
print(f'Root Mean Squared Error: {rmse}')

print(f"Mean Absolute Error (MAE) on Training Data: {mae_train}")

y_pred = random_forest_model.predict(x_test)
y_pred.shape

test_data.loc[test_data.Radiation_Global_Tilted.isnull(), 'Radiation_Global_Tilted'] = y_pred
test_data.head()

df = pd.concat([train_data,test_data])
df.sort_index(inplace=True)
df.head()

test_data = df[df["Radiation_Diffuse_Tilted"].isnull()]
test_data.shape


x_test = test_data[["Diffuse_Horizontal_Radiation"]]
x_test.shape

train_data = df.dropna(subset="Radiation_Diffuse_Tilted")
train_data.shape

x_train = train_data[["Diffuse_Horizontal_Radiation"]]
x_train = x_train.fillna(method='ffill')
x_train.shape

y_train = train_data["Radiation_Diffuse_Tilted"]
y_train.shape

LR_model.fit(x_train, y_train)

train_score = LR_model.score(x_train, y_train)

print(f"Model Score (R^2) on Training Data: {train_score}")

from sklearn.metrics import mean_absolute_error
y_train_pred = LR_model.predict(x_train)
mae_train = mean_absolute_error(y_train, y_train_pred)

mse = mean_squared_error(y_train, y_train_pred)
rmse = math.sqrt(mse)
print(f'Root Mean Squared Error: {rmse}')

print(f"Mean Absolute Error (MAE) on Training Data: {mae_train}")

# Train the model
random_forest_model.fit(x_train, y_train)
train_score_rf = random_forest_model.score(x_train, y_train)

print(f"Model Score (R^2) on Training Data: {train_score_rf}")
from sklearn.metrics import mean_absolute_error
y_train_pred = random_forest_model.predict(x_train)
mae_train = mean_absolute_error(y_train, y_train_pred)

mse = mean_squared_error(y_train, y_train_pred)
rmse = math.sqrt(mse)
print(f'Root Mean Squared Error: {rmse}')

print(f"Mean Absolute Error (MAE) on Training Data: {mae_train}")

predictions = random_forest_model.predict(x_test)

test_data.loc[test_data.Radiation_Diffuse_Tilted.isnull(), 'Radiation_Diffuse_Tilted'] = y_pred
test_data.head()

df = pd.concat([train_data,test_data])
df.sort_index(inplace=True)
df.head()

df.to_csv('new.csv')

from google.colab import files
#files.download('new.csv')

from google.colab import files
files.upload()

df1 = pd.read_csv("Combined_DHASC_power.csv")
df1.shape

df.shape

result = pd.concat([df, df1], axis=1)
result = pd.read_csv('combined_file.csv')
result.shape

